#############################################################################

### Dev Environment ###

# Dev Application configuration
%dev.quarkus.http.port=${APP_PORT:8082}
%dev.quarkus.http.host=${APP_HOST:0.0.0.0}


# MongoDB configuration
%dev.quarkus.mongodb.connection-string=${MONGODB_URL:mongodb+srv://devteam:Zagateam2023*@applicationcluster.tvbngn1.mongodb.net/test}



# # US server URL
# us.cluster.url=https://api.zagaobservability.zagaopensource.com:6443

# # # India server URL
# # india.cluster.url=https://api.zagaopenshift.zagaopensource.com:6443



# Trace Configuration
%dev.mp.messaging.incoming.trace-audit-in.bootstrap.servers=${TRACE_BOOTSTRAP_URL:observai-kafka-external-bootstrap-observability-kafka.apps.zagaobservability.zagaopensource.com:443}
%dev.mp.messaging.incoming.trace-audit-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.trace-audit-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.trace-audit-in.value.deserializer=com.zaga.kafka.consumer.TraceDeserialization
%dev.mp.messaging.incoming.trace-audit-in.topic=${TRACE_TOPIC:observai_main_traces_1}
%dev.mp.messaging.incoming.trace-audit-in.group.id=${TRACE_TOPIC_GROUP_ID:trace}
%dev.mp.messaging.incoming.trace-audit-in.value-deserialization-failure-handler=trace-failure-fallback
%dev.mp.messaging.incoming.trace-audit-in.failure-strategy=ignore
%dev.mp.messaging.incoming.trace-audit-in.commit-strategy=throttled
%dev.mp.messaging.incoming.trace-audit-in.auto.offset.reset=${TRACE_OFFSET_RESET:latest}



# SSL
%dev.mp.messaging.incoming.trace-audit-in.security.protocol=SSL
%dev.mp.messaging.incoming.trace-audit-in.ssl.truststore.location=./observai.jks
%dev.mp.messaging.incoming.trace-audit-in.ssl.truststore.password=password

# TraceDTO Configuration
%dev.mp.messaging.incoming.trace-in.bootstrap.servers=${TRACE_BOOTSTRAP_URL:observai-kafka-external-bootstrap-observability-kafka.apps.zagaobservability.zagaopensource.com:443}
%dev.mp.messaging.incoming.trace-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.trace-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.trace-in.value.deserializer=com.zaga.kafka.consumer.TraceDeserialization
%dev.mp.messaging.incoming.trace-in.topic=${TRACE_TOPIC:observai_main_traces_1}
%dev.mp.messaging.incoming.trace-in.group.id=${TRACEDTO_TOPIC_GROUP_ID:tracedtolocal}
%dev.mp.messaging.incoming.trace-in.value-deserialization-failure-handler=trace-failure-fallback
%dev.mp.messaging.incoming.trace-in.failure-strategy=ignore
%dev.mp.messaging.incoming.trace-in.commit-strategy=throttled
%dev.mp.messaging.incoming.trace-in.auto.offset.reset=${TRACE_OFFSET_RESET:latest}



# SSL
%dev.mp.messaging.incoming.trace-in.security.protocol=SSL
%dev.mp.messaging.incoming.trace-in.ssl.truststore.location=./observai.jks
%dev.mp.messaging.incoming.trace-in.ssl.truststore.password=password



# LogDTO configuration
%dev.mp.messaging.incoming.logs-audit-in.bootstrap.servers=${LOG_BOOTSTRAP_URL:observai-kafka-external-bootstrap-observability-kafka.apps.zagaobservability.zagaopensource.com:443}
%dev.mp.messaging.incoming.logs-audit-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.logs-audit-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.logs-audit-in.value.deserializer=com.zaga.kafka.consumer.LogDeserialization
%dev.mp.messaging.incoming.logs-audit-in.topic=${LOG_TOPIC:observai_main_logs_1}
%dev.mp.messaging.incoming.logs-audit-in.group.id=${LOGDTO_TOPIC_GROUP_ID:logdtoconsume}
%dev.mp.messaging.incoming.logs-audit-in.value-deserialization-failure-handler=log-failure-fallback
%dev.mp.messaging.incoming.logs-audit-in.failure-strategy=ignore
%dev.mp.messaging.incoming.logs-audit-in.commit-strategy=throttled
%dev.mp.messaging.incoming.logs-audit-in.auto.offset.reset=${LOG_OFFSET_RESET:latest}

# SSL
%dev.mp.messaging.incoming.logs-audit-in.security.protocol=SSL
%dev.mp.messaging.incoming.logs-audit-in.ssl.truststore.location=./observai.jks
%dev.mp.messaging.incoming.logs-audit-in.ssl.truststore.password=password


# Log configuration
%dev.mp.messaging.incoming.logs-in.bootstrap.servers=${LOG_BOOTSTRAP_URL:observai-kafka-external-bootstrap-observability-kafka.apps.zagaobservability.zagaopensource.com:443}
%dev.mp.messaging.incoming.logs-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.logs-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.logs-in.value.deserializer=com.zaga.kafka.consumer.LogDeserialization
%dev.mp.messaging.incoming.logs-in.topic=${LOG_TOPIC:observai_main_logs_1}
%dev.mp.messaging.incoming.logs-in.group.id=${LOG_TOPIC_GROUP_ID:logsconsume}
%dev.mp.messaging.incoming.logs-in.value-deserialization-failure-handler=log-failure-fallback
%dev.mp.messaging.incoming.logs-in.failure-strategy=ignore
%dev.mp.messaging.incoming.logs-in.commit-strategy=throttled
%dev.mp.messaging.incoming.logs-in.auto.offset.reset=${LOG_OFFSET_RESET:latest}

# SSL
%dev.mp.messaging.incoming.logs-in.security.protocol=SSL
%dev.mp.messaging.incoming.logs-in.ssl.truststore.location=./observai.jks
%dev.mp.messaging.incoming.logs-in.ssl.truststore.password=password



# Metric configuration
%dev.mp.messaging.incoming.metric-audit-in.bootstrap.servers=${METRIC_BOOTSTRAP_URL:observai-kafka-external-bootstrap-observability-kafka.apps.zagaobservability.zagaopensource.com:443}
%dev.mp.messaging.incoming.metric-audit-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.metric-audit-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.metric-audit-in.value.deserializer=com.zaga.kafka.consumer.MetricDeserialization
%dev.mp.messaging.incoming.metric-audit-in.topic=${METRIC_TOPIC:observai_main_metrics_1}
%dev.mp.messaging.incoming.metric-audit-in.group.id=${METRIC_TOPIC_GROUP_ID:metricconsumed}
%dev.mp.messaging.incoming.metric-audit-in.value-deserialization-failure-handler=metric-failure-fallback
%dev.mp.messaging.incoming.metric-audit-in.failure-strategy=ignore
%dev.mp.messaging.incoming.metric-audit-in.commit-strategy=throttled
%dev.mp.messaging.incoming.metric-audit-in.auto.offset.reset=${METRIC_OFFSET_RESET:latest}

# SSL
%dev.mp.messaging.incoming.metric-audit-in.security.protocol=SSL
%dev.mp.messaging.incoming.metric-audit-in.ssl.truststore.location=./observai.jks
%dev.mp.messaging.incoming.metric-audit-in.ssl.truststore.password=password

# MetricDTO configuration
%dev.mp.messaging.incoming.metric-in.bootstrap.servers=${METRIC_BOOTSTRAP_URL:observai-kafka-external-bootstrap-observability-kafka.apps.zagaobservability.zagaopensource.com:443}
%dev.mp.messaging.incoming.metric-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.metric-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.metric-in.value.deserializer=com.zaga.kafka.consumer.MetricDeserialization
%dev.mp.messaging.incoming.metric-in.topic=${METRIC_TOPIC:observai_main_metrics_1}
%dev.mp.messaging.incoming.metric-in.group.id=${METRICDTO_TOPIC_GROUP_ID:metricdtosconsumed}
%dev.mp.messaging.incoming.metric-in.value-deserialization-failure-handler=metric-failure-fallback
%dev.mp.messaging.incoming.metric-in.failure-strategy=ignore
%dev.mp.messaging.incoming.metric-in.commit-strategy=throttled
%dev.mp.messaging.incoming.metric-in.auto.offset.reset=${METRIC_OFFSET_RESET:latest}

# SSL
%dev.mp.messaging.incoming.metric-in.security.protocol=SSL
%dev.mp.messaging.incoming.metric-in.ssl.truststore.location=./observai.jks
%dev.mp.messaging.incoming.metric-in.ssl.truststore.password=password




# Kepler Configuration
%dev.mp.messaging.incoming.kepler-audit-in.bootstrap.servers=${KEPLER_BOOTSTRAP_URL:observai-kafka-external-bootstrap-observability-kafka.apps.zagaobservability.zagaopensource.com:443}
%dev.mp.messaging.incoming.kepler-audit-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.kepler-audit-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.kepler-audit-in.value.deserializer=com.zaga.kafka.consumer.KeplerDeserialization
%dev.mp.messaging.incoming.kepler-audit-in.topic=${KEPLER_TOPIC:kepler_zaga_vm}
%dev.mp.messaging.incoming.kepler-audit-in.group.id=${KEPLER_TOPIC_GROUP_ID:kepler}
%dev.mp.messaging.incoming.kepler-audit-in.value-deserialization-failure-handler=kepler-failure-fallback
%dev.mp.messaging.incoming.kepler-audit-in.failure-strategy=ignore
%dev.mp.messaging.incoming.kepler-audit-in.commit-strategy=throttled
%dev.mp.messaging.incoming.kepler-audit-in.auto.offset.reset=${KEPLER_OFFSET_RESET:latest}

# SSL
%dev.mp.messaging.incoming.kepler-in.security.protocol=SSL
%dev.mp.messaging.incoming.kepler-in.ssl.truststore.location=./observai.jks
%dev.mp.messaging.incoming.kepler-in.ssl.truststore.password=password



# KeplerDTO Configuration
%dev.mp.messaging.incoming.kepler-in.bootstrap.servers=${KEPLER_BOOTSTRAP_URL:observai-kafka-external-bootstrap-observability-kafka.apps.zagaobservability.zagaopensource.com:443}
%dev.mp.messaging.incoming.kepler-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.kepler-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.kepler-in.value.deserializer=com.zaga.kafka.consumer.KeplerDeserialization
%dev.mp.messaging.incoming.kepler-in.topic=${KEPLER_TOPIC:kepler_zaga_vm}
%dev.mp.messaging.incoming.kepler-in.group.id=${KEPLERDTO_TOPIC_GROUP_ID:keplerdto}
%dev.mp.messaging.incoming.kepler-in.value-deserialization-failure-handler=kepler-failure-fallback
%dev.mp.messaging.incoming.kepler-in.failure-strategy=ignore
%dev.mp.messaging.incoming.kepler-in.commit-strategy=throttled
%dev.mp.messaging.incoming.kepler-in.auto.offset.reset=${KEPLER_OFFSET_RESET:latest}

# SSL
%dev.mp.messaging.incoming.kepler-in.security.protocol=SSL
%dev.mp.messaging.incoming.kepler-in.ssl.truststore.location=./observai.jks
%dev.mp.messaging.incoming.kepler-in.ssl.truststore.password=password



# PodMetric configuration
%dev.mp.messaging.incoming.pod-audit-in.bootstrap.servers=${PODMETRIC_BOOTSTRAP_URL:infra-kafka-external-bootstrap-observability-kafka.apps.zagaopenshift.zagaopensource.com:443}
%dev.mp.messaging.incoming.pod-audit-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.pod-audit-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.pod-audit-in.value.deserializer=com.zaga.kafka.consumer.PodMetricsDeserialization
%dev.mp.messaging.incoming.pod-audit-in.topic=${PODMETRIC_TOPIC:kubelet_pod_stats}
%dev.mp.messaging.incoming.pod-audit-in.group.id=${PODMETRIC_TOPIC_GROUP_ID:pod}
%dev.mp.messaging.incoming.pod-audit-in.value-deserialization-failure-handler=pod-metric-failure-fallback
%dev.mp.messaging.incoming.pod-audit-in.failure-strategy=ignore
%dev.mp.messaging.incoming.pod-audit-in.commit-strategy=throttled
%dev.mp.messaging.incoming.pod-audit-in.auto.offset.reset=${PODMETRIC_OFFSET_RESET:latest}

# SSL
%dev.mp.messaging.incoming.pod-audit-in.security.protocol=SSL
%dev.mp.messaging.incoming.pod-audit-in.ssl.truststore.location=./infra.jks
%dev.mp.messaging.incoming.pod-audit-in.ssl.truststore.password=password



# PodMetricDTO configuration
%dev.mp.messaging.incoming.pod-in.bootstrap.servers=${PODMETRIC_BOOTSTRAP_URL:infra-kafka-external-bootstrap-observability-kafka.apps.zagaopenshift.zagaopensource.com:443}
%dev.mp.messaging.incoming.pod-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.pod-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.pod-in.value.deserializer=com.zaga.kafka.consumer.PodMetricsDeserialization
%dev.mp.messaging.incoming.pod-in.topic=${PODMETRIC_TOPIC:kubelet_pod_stats}
%dev.mp.messaging.incoming.pod-in.group.id=${PODMETRICDTO_TOPIC_GROUP_ID:poddto}
%dev.mp.messaging.incoming.pod-in.value-deserialization-failure-handler=pod-metric-failure-fallback
%dev.mp.messaging.incoming.pod-in.failure-strategy=ignore
%dev.mp.messaging.incoming.pod-in.commit-strategy=throttled
%dev.mp.messaging.incoming.pod-in.auto.offset.reset=${PODMETRIC_OFFSET_RESET:latest}

# SSL
%dev.mp.messaging.incoming.pod-in.security.protocol=SSL
%dev.mp.messaging.incoming.pod-in.ssl.truststore.location=./infra.jks
%dev.mp.messaging.incoming.pod-in.ssl.truststore.password=password



# NodeMetric configuration
%dev.mp.messaging.incoming.node-in.bootstrap.servers=${NODEMETRIC_BOOTSTRAP_URL:infra-kafka-external-bootstrap-observability-kafka.apps.zagaobservability.zagaopensource.com:443}
%dev.mp.messaging.incoming.node-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.node-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.node-in.value.deserializer=com.zaga.kafka.consumer.NodeMetricsDeserialization
%dev.mp.messaging.incoming.node-in.topic=${NODEMETRIC_TOPIC:kubelet_node_stats}
%dev.mp.messaging.incoming.node-in.group.id=${NODEMETRIC_TOPIC_GROUP_ID:node}
%dev.mp.messaging.incoming.node-in.value-deserialization-failure-handler=node-metric-failure-fallback
%dev.mp.messaging.incoming.node-in.failure-strategy=ignore
%dev.mp.messaging.incoming.node-in.commit-strategy=throttled
%dev.mp.messaging.incoming.node-in.auto.offset.reset=${NODEMETRIC_OFFSET_RESET:latest}

# SSL
%dev.mp.messaging.incoming.node-in.security.protocol=SSL
%dev.mp.messaging.incoming.node-in.ssl.truststore.location=./infra.jks
%dev.mp.messaging.incoming.node-in.ssl.truststore.password=password



# Event configuration
%dev.mp.messaging.incoming.event-audit-in.bootstrap.servers=${EVENT_BOOTSTRAP_URL:infra-kafka-external-bootstrap-observability-kafka.apps.zagaopenshift.zagaopensource.com:443}
%dev.mp.messaging.incoming.event-audit-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.event-audit-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.event-audit-in.value.deserializer=com.zaga.kafka.consumer.EventDeserialization
%dev.mp.messaging.incoming.event-audit-in.topic=${EVENT_TOPIC:events_data}
%dev.mp.messaging.incoming.event-audit-in.group.id=${EVENT_TOPIC_GROUP_ID:event}
%dev.mp.messaging.incoming.event-audit-in.value-deserialization-failure-handler=event-failure-fallback
%dev.mp.messaging.incoming.event-audit-in.failure-strategy=ignore
%dev.mp.messaging.incoming.event-audit-in.commit-strategy=throttled
%dev.mp.messaging.incoming.event-audit-in.auto.offset.reset=${EVENT_OFFSET_RESET:latest}

# SSL
%dev.mp.messaging.incoming.event-audit-in.security.protocol=SSL
%dev.mp.messaging.incoming.event-audit-in.ssl.truststore.location=./infra.jks
%dev.mp.messaging.incoming.event-audit-in.ssl.truststore.password=password


# EventDTO configuration
%dev.mp.messaging.incoming.event-in.bootstrap.servers=${EVENT_BOOTSTRAP_URL:infra-kafka-external-bootstrap-observability-kafka.apps.zagaopenshift.zagaopensource.com:443}
%dev.mp.messaging.incoming.event-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.event-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.event-in.value.deserializer=com.zaga.kafka.consumer.EventDeserialization
%dev.mp.messaging.incoming.event-in.topic=${EVENT_TOPIC:events_data}
%dev.mp.messaging.incoming.event-audit-in.group.id=${EVENTDTO_TOPIC_GROUP_ID:eventdto}
%dev.mp.messaging.incoming.event-in.value-deserialization-failure-handler=event-failure-fallback
%dev.mp.messaging.incoming.event-in.failure-strategy=ignore
%dev.mp.messaging.incoming.event-in.commit-strategy=throttled
%dev.mp.messaging.incoming.event-in.auto.offset.reset=${EVENT_OFFSET_RESET:latest}

# SSL
%dev.mp.messaging.incoming.event-in.security.protocol=SSL
%dev.mp.messaging.incoming.event-in.ssl.truststore.location=./infra.jks
%dev.mp.messaging.incoming.event-in.ssl.truststore.password=password



# Cluster_utilization configuration
%dev.mp.messaging.incoming.cluser_utilization-audit-in.bootstrap.servers=${CLUSTER_UTILIZATION_BOOTSTRAP_URL:infra-kafka-external-bootstrap-observability-kafka.apps.zagaobservability.zagaopensource.com:443}
%dev.mp.messaging.incoming.cluser_utilization-audit-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.cluser_utilization-audit-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.cluser_utilization-audit-in.value.deserializer=com.zaga.kafka.consumer.ClusterUtilizationDeserialization
%dev.mp.messaging.incoming.cluser_utilization-audit-in.topic=${CLUSTER_UTILIZATION_TOPIC:kubelet_node_stats}
%dev.mp.messaging.incoming.cluser_utilization-audit-in.group.id=${CLUSTER_UTILIZATION_GROUP_ID:clustterUtil}
%dev.mp.messaging.incoming.cluser_utilization-audit-in.value-deserialization-failure-handler=cluster_utilization-failure-fallback
%dev.mp.messaging.incoming.cluser_utilization-audit-in.failure-strategy=ignore
%dev.mp.messaging.incoming.cluser_utilization-audit-in.commit-strategy=throttled
%dev.mp.messaging.incoming.cluser_utilization-audit-in.auto.offset.reset=${CLUSTER_UTILIZATION_OFFSET_RESET:latest}

# SSL
%dev.mp.messaging.incoming.cluser_utilization-audit-in.security.protocol=SSL
%dev.mp.messaging.incoming.cluser_utilization-audit-in.ssl.truststore.location=./infra.jks
%dev.mp.messaging.incoming.cluser_utilization-audit-in.ssl.truststore.password=password

# Cluster_utilizationDTO configuration
%dev.mp.messaging.incoming.cluser_utilization-in.bootstrap.servers=${CLUSTER_UTILIZATION_BOOTSTRAP_URL:infra-kafka-external-bootstrap-observability-kafka.apps.zagaobservability.zagaopensource.com:443}
%dev.mp.messaging.incoming.cluser_utilization-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.cluser_utilization-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.cluser_utilization-in.value.deserializer=com.zaga.kafka.consumer.ClusterUtilizationDeserialization
%dev.mp.messaging.incoming.cluser_utilization-in.topic=${CLUSTER_UTILIZATION_TOPIC:kubelet_node_stats}
%dev.mp.messaging.incoming.cluser_utilization-in.group.id=${CLUSTER_UTILIZATIONDTO_GROUP_ID:clustterUtildto}
%dev.mp.messaging.incoming.cluser_utilization-in.value-deserialization-failure-handler=cluster_utilization-failure-fallback
%dev.mp.messaging.incoming.cluser_utilization-in.failure-strategy=ignore
%dev.mp.messaging.incoming.cluser_utilization-in.commit-strategy=throttled
%dev.mp.messaging.incoming.cluser_utilization-in.auto.offset.reset=${CLUSTER_UTILIZATION_OFFSET_RESET:latest}

# SSL
%dev.mp.messaging.incoming.cluser_utilization-in.security.protocol=SSL
%dev.mp.messaging.incoming.cluser_utilization-in.ssl.truststore.location=./infra.jks
%dev.mp.messaging.incoming.cluser_utilization-in.ssl.truststore.password=password


# Producer Configuration
%dev.mp.messaging.outgoing.alert-out.connector=smallrye-kafka
%dev.mp.messaging.outgoing.alert-out.topic=${ALERT_TOPIC:AlertTopic}
%dev.mp.messaging.outgoing.alert-out.bootstrap.servers=${ALERT_BOOTSTRAP_URL:observai-kafka-external-bootstrap-observability-kafka.apps.zagaobservability.zagaopensource.com:443}
%dev.mp.messaging.outgoing.alert-out.value.serializer=com.zaga.kafka.alertProducer.AlertSerializer
%dev.mp.messaging.outgoing.alert-out.key.serializer=org.apache.kafka.common.serialization.StringSerializer

# SSL Configuration for Producer
%dev.mp.messaging.outgoing.alert-out.security.protocol=SSL
%dev.mp.messaging.outgoing.alert-out.ssl.truststore.location=./observai.jks
%dev.mp.messaging.outgoing.alert-out.ssl.truststore.password=password


# Consumer Configuration
%dev.mp.messaging.incoming.alert-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.alert-in.topic=${ALERT_TOPIC:AlertTopic}
%dev.mp.messaging.incoming.alert-in.bootstrap.servers=${ALERT_BOOTSTRAP_URL:observai-kafka-external-bootstrap-observability-kafka.apps.zagaobservability.zagaopensource.com:443}
%dev.mp.messaging.incoming.alert-in.value.deserializer=com.zaga.kafka.alertConsumer.AlertDeserializer
%dev.mp.messaging.incoming.alert-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
# %dev.mp.messaging.incoming.alert-in.auto.offset.reset=latest

# SSL Configuration for Consumer
%dev.mp.messaging.incoming.alert-in.security.protocol=SSL
%dev.mp.messaging.incoming.alert-in.ssl.truststore.location=./observai.jks
%dev.mp.messaging.incoming.alert-in.ssl.truststore.password=password

# /E:\BALAZAGA\observAi-backend\src\main\resources\kafka_jks


# Quarkus CORS headers
%dev.quarkus.http.cors=true
%dev.quarkus.http.cors.origins=*
%dev.quarkus.http.cors.methods=GET,POST,PUT,DELETE
%dev.quarkus.http.cors.headers=Content-Type


#####################################################################

### Production ###

# Application configuration
%prod.quarkus.http.port=${APP_PORT:8082}
%prod.quarkus.http.host=${APP_HOST:0.0.0.0}

# MongoDB configuration
%prod.quarkus.mongodb.connection-string=${MONGODB_URL:mongodb://mongodb-ops-manager:Devdbpass2023@zaga-mongo-ops-manager-db-0.zaga-mongo-ops-manager-db-svc.mongodb-workspace.svc.cluster.local:27017,zaga-mongo-ops-manager-db-1.zaga-mongo-ops-manager-db-svc.mongodb-workspace.svc.cluster.local:27017,zaga-mongo-ops-manager-db-2.zaga-mongo-ops-manager-db-svc.mongodb-workspace.svc.cluster.local:27017/?authMechanism=SCRAM-SHA-256&authSource=admin&connectTimeoutMS=20000&replicaSet=zaga-mongo-ops-manager-db&serverSelectionTimeoutMS=20000}

# Trace Configuration
%prod.mp.messaging.incoming.trace-audit-in.bootstrap.servers=${TRACE_BOOTSTRAP_URL:observai-kafka-cluster-kafka-bootstrap.kafka-workspace.svc.cluster.local:9092}
%prod.mp.messaging.incoming.trace-audit-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.trace-audit-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.trace-audit-in.value.deserializer=com.zaga.kafka.consumer.TraceDeserialization
%prod.mp.messaging.incoming.trace-audit-in.topic=${TRACE_TOPIC:observai_main_traces_1}
%prod.mp.messaging.incoming.trace-audit-in.group.id=${TRACE_TOPIC_GROUP_ID:trace}
%prod.mp.messaging.incoming.trace-audit-in.value-deserialization-failure-handler=trace-failure-fallback
%prod.mp.messaging.incoming.trace-audit-in.failure-strategy=ignore
%prod.mp.messaging.incoming.trace-audit-in.commit-strategy=throttled
%prod.mp.messaging.incoming.trace-audit-in.auto.offset.reset=${TRACE_OFFSET_RESET:latest}

# TraceDTO Configuration
%prod.mp.messaging.incoming.trace-in.bootstrap.servers=${TRACE_BOOTSTRAP_URL:observai-kafka-cluster-kafka-bootstrap.kafka-workspace.svc.cluster.local:9092}
%prod.mp.messaging.incoming.trace-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.trace-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.trace-in.value.deserializer=com.zaga.kafka.consumer.TraceDeserialization
%prod.mp.messaging.incoming.trace-in.topic=${TRACE_TOPIC:observai_main_traces_1}
%prod.mp.messaging.incoming.trace-in.group.id=${TRACEDTO_TOPIC_GROUP_ID:tracedto}
%prod.mp.messaging.incoming.trace-in.value-deserialization-failure-handler=trace-failure-fallback
%prod.mp.messaging.incoming.trace-in.failure-strategy=ignore
%prod.mp.messaging.incoming.trace-in.commit-strategy=throttled
%prod.mp.messaging.incoming.trace-in.auto.offset.reset=${TRACE_OFFSET_RESET:latest}


# Log configuration
%prod.mp.messaging.incoming.logs-audit-in.bootstrap.servers=${LOG_BOOTSTRAP_URL:observai-kafka-cluster-kafka-bootstrap.kafka-workspace.svc.cluster.local:9092}
%prod.mp.messaging.incoming.logs-audit-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.logs-audit-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.logs-audit-in.value.deserializer=com.zaga.kafka.consumer.LogDeserialization
%prod.mp.messaging.incoming.logs-audit-in.topic=${LOG_TOPIC:observai_main_logs_1}
%prod.mp.messaging.incoming.logs-audit-in.group.id=${LOGS_TOPIC_GROUP_ID:log}
%prod.mp.messaging.incoming.logs-audit-in.value-deserialization-failure-handler=log-failure-fallback
%prod.mp.messaging.incoming.logs-audit-in.failure-strategy=ignore
%prod.mp.messaging.incoming.logs-audit-in.commit-strategy=throttled
%prod.mp.messaging.incoming.logs-audit-in.auto.offset.reset=${LOG_OFFSET_RESET:latest}

# LogDTO configuration
%prod.mp.messaging.incoming.logs-in.bootstrap.servers=${LOG_BOOTSTRAP_URL:observai-kafka-cluster-kafka-bootstrap.kafka-workspace.svc.cluster.local:9092}
%prod.mp.messaging.incoming.logs-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.logs-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.logs-in.value.deserializer=com.zaga.kafka.consumer.LogDeserialization
%prod.mp.messaging.incoming.logs-in.topic=${LOG_TOPIC:observai_main_logs_1}
%prod.mp.messaging.incoming.logs-audit-in.group.id=${LOGDTO_TOPIC_GROUP_ID:logdto}
%prod.mp.messaging.incoming.logs-in.value-deserialization-failure-handler=log-failure-fallback
%prod.mp.messaging.incoming.logs-in.failure-strategy=ignore
%prod.mp.messaging.incoming.logs-in.commit-strategy=throttled
%prod.mp.messaging.incoming.logs-in.auto.offset.reset=${LOG_OFFSET_RESET:latest}


# Metric configuration
%prod.mp.messaging.incoming.metric-audit-in.bootstrap.servers=${METRIC_BOOTSTRAP_URL:observai-kafka-cluster-kafka-bootstrap.kafka-workspace.svc.cluster.local:9092}
%prod.mp.messaging.incoming.metric-audit-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.metric-audit-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.metric-audit-in.value.deserializer=com.zaga.kafka.consumer.MetricDeserialization
%prod.mp.messaging.incoming.metric-audit-in.topic=${METRIC_TOPIC:observai_main_metrics_1}
%prod.mp.messaging.incoming.metric-audit-in.group.id=${METRIC_TOPIC_GROUP_ID:metric}
%prod.mp.messaging.incoming.metric-audit-in.value-deserialization-failure-handler=metric-failure-fallback
%prod.mp.messaging.incoming.metric-audit-in.failure-strategy=ignore
%prod.mp.messaging.incoming.metric-audit-in.commit-strategy=throttled
%prod.mp.messaging.incoming.metric-audit-in.auto.offset.reset=${METRIC_OFFSET_RESET:latest}


# MetricDTO configuration
%prod.mp.messaging.incoming.metric-in.bootstrap.servers=${METRIC_BOOTSTRAP_URL:observai-kafka-cluster-kafka-bootstrap.kafka-workspace.svc.cluster.local:9092}
%prod.mp.messaging.incoming.metric-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.metric-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.metric-in.value.deserializer=com.zaga.kafka.consumer.MetricDeserialization
%prod.mp.messaging.incoming.metric-in.topic=${METRIC_TOPIC:observai_main_metrics_1}
%prod.mp.messaging.incoming.metric-in.group.id=${METRICDTO_TOPIC_GROUP_ID:metricdto}
%prod.mp.messaging.incoming.metric-in.value-deserialization-failure-handler=metric-failure-fallback
%prod.mp.messaging.incoming.metric-in.failure-strategy=ignore
%prod.mp.messaging.incoming.metric-in.commit-strategy=throttled
%prod.mp.messaging.incoming.metric-in.auto.offset.reset=${METRIC_OFFSET_RESET:latest}


# Kepler Configuration
%prod.mp.messaging.incoming.kepler-audit-in.bootstrap.servers=${KEPLER_BOOTSTRAP_URL:observai-kafka-cluster-kafka-bootstrap.kafka-workspace.svc.cluster.local:9092}
%prod.mp.messaging.incoming.kepler-audit-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.kepler-audit-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.kepler-audit-in.value.deserializer=com.zaga.kafka.consumer.KeplerDeserialization
%prod.mp.messaging.incoming.kepler-audit-in.topic=${KEPLER_TOPIC:kepler_zaga_vm}
%prod.mp.messaging.incoming.kepler-audit-in.group.id=${KEPLER_TOPIC_GROUP_ID:kepler}
%prod.mp.messaging.incoming.kepler-audit-in.value-deserialization-failure-handler=kepler-failure-fallback
%prod.mp.messaging.incoming.kepler-audit-in.failure-strategy=ignore
%prod.mp.messaging.incoming.kepler-audit-in.commit-strategy=throttled
%prod.mp.messaging.incoming.kepler-audit-in.auto.offset.reset=${KEPLER_OFFSET_RESET:latest}



# KeplerDTO Configuration
%prod.mp.messaging.incoming.kepler-in.bootstrap.servers=${KEPLER_BOOTSTRAP_URL:observai-kafka-cluster-kafka-bootstrap.kafka-workspace.svc.cluster.local:9092}
%prod.mp.messaging.incoming.kepler-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.kepler-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.kepler-in.value.deserializer=com.zaga.kafka.consumer.KeplerDeserialization
%prod.mp.messaging.incoming.kepler-in.topic=${KEPLER_TOPIC:kepler_zaga_vm}
%prod.mp.messaging.incoming.kepler-in.group.id=${KEPLERDTO_TOPIC_GROUP_ID:keplerdto}
%prod.mp.messaging.incoming.kepler-in.value-deserialization-failure-handler=kepler-failure-fallback
%prod.mp.messaging.incoming.kepler-in.failure-strategy=ignore
%prod.mp.messaging.incoming.kepler-in.commit-strategy=throttled
%prod.mp.messaging.incoming.kepler-in.auto.offset.reset=${KEPLER_OFFSET_RESET:latest}


# PodMetric configuration
%prod.mp.messaging.incoming.pod-audit-in.bootstrap.servers=${PODMETRIC_BOOTSTRAP_URL:infra-kafka-bootstrap.observability-kafka.svc.cluster.local:443}
%prod.mp.messaging.incoming.pod-audit-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.pod-audit-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.pod-audit-in.value.deserializer=com.zaga.kafka.consumer.PodMetricsDeserialization
%prod.mp.messaging.incoming.pod-audit-in.topic=${PODMETRIC_TOPIC:kubelet_pod_stats}
%prod.mp.messaging.incoming.pod-audit-in.group.id=${PODMETRIC_TOPIC_GROUP_ID:pod}
%prod.mp.messaging.incoming.pod-audit-in.value-deserialization-failure-handler=pod-metric-failure-fallback
%prod.mp.messaging.incoming.pod-audit-in.failure-strategy=ignore
%prod.mp.messaging.incoming.pod-audit-in.commit-strategy=throttled
%prod.mp.messaging.incoming.pod-audit-in.auto.offset.reset=${PODMETRIC_OFFSET_RESET:latest}


# PodMetricDTO configuration
%prod.mp.messaging.incoming.pod-in.bootstrap.servers=${PODMETRIC_BOOTSTRAP_URL:infra-kafka-bootstrap.observability-kafka.svc.cluster.local:443}
%prod.mp.messaging.incoming.pod-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.pod-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.pod-in.value.deserializer=com.zaga.kafka.consumer.PodMetricsDeserialization
%prod.mp.messaging.incoming.pod-in.topic=${PODMETRIC_TOPIC:kubelet_pod_stats}
%prod.mp.messaging.incoming.pod-in.group.id=${PODMETRICDTO_TOPIC_GROUP_ID:poddto}
%prod.mp.messaging.incoming.pod-in.value-deserialization-failure-handler=pod-metric-failure-fallback
%prod.mp.messaging.incoming.pod-in.failure-strategy=ignore
%prod.mp.messaging.incoming.pod-in.commit-strategy=throttled
%prod.mp.messaging.incoming.pod-in.auto.offset.reset=${PODMETRIC_OFFSET_RESET:latest}

# NodeMetric configuration
%prod.mp.messaging.incoming.node-in.bootstrap.servers=${NODEMETRIC_BOOTSTRAP_URL:infra-kafka-bootstrap.observability-kafka.svc.cluster.local:443}
%prod.mp.messaging.incoming.node-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.node-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.node-in.value.deserializer=com.zaga.kafka.consumer.NodeMetricsDeserialization
%prod.mp.messaging.incoming.node-in.topic=${NODEMETRIC_TOPIC:kubelet_node_stats}
%prod.mp.messaging.incoming.node-in.group.id=${NODEMETRIC_TOPIC_GROUP_ID:node}
%prod.mp.messaging.incoming.node-in.value-deserialization-failure-handler=node-metric-failure-fallback
%prod.mp.messaging.incoming.node-in.failure-strategy=ignore
%prod.mp.messaging.incoming.node-in.commit-strategy=throttled
%prod.mp.messaging.incoming.node-in.auto.offset.reset=${NODEMETRIC_OFFSET_RESET:latest}



# Producer Configuration
%prod.mp.messaging.outgoing.alert-out.connector=smallrye-kafka
%prod.mp.messaging.outgoing.alert-out.topic=${ALERT_TOPIC:AlertTopic}
%prod.mp.messaging.outgoing.alert-out.bootstrap.servers=${ALERT_BOOTSTRAP_URL:observai-kafka-cluster-kafka-bootstrap.kafka-workspace.svc.cluster.local:9092}
%prod.mp.messaging.outgoing.alert-out.value.serializer=com.zaga.kafka.alertProducer.AlertSerializer
%prod.mp.messaging.outgoing.alert-out.key.serializer=org.apache.kafka.common.serialization.StringSerializer
%prod.mp.messaging.outgoing.alert-out.auto.offset.reset=${ALERT_OFFSET_RESET:latest}


# SSL Configuration for Producer
# %prod.mp.messaging.outgoing.alert-out.security.protocol=SSL
# %prod.mp.messaging.outgoing.alert-out.ssl.truststore.location=./observai-kafka-cluster.jks
# %prod.mp.messaging.outgoing.alert-out.ssl.truststore.password=password


# Consumer Configuration
%prod.mp.messaging.incoming.alert-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.alert-in.topic=${ALERT_TOPIC:AlertTopic}
%prod.mp.messaging.incoming.alert-in.bootstrap.servers=${ALERT_BOOTSTRAP_URL:observai-kafka-cluster-kafka-bootstrap.kafka-workspace.svc.cluster.local:9092}
%prod.mp.messaging.incoming.alert-in.value.deserializer=com.zaga.kafka.alertConsumer.AlertDeserializer
%prod.mp.messaging.incoming.alert-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.alert-in.auto.offset.reset=${ALERT_OFFSET_RESET:latest}

#Events configuration
%prod.mp.messaging.incoming.event-audit-in.bootstrap.servers=${EVENT_BOOTSTRAP_URL:infra-kafka-bootstrap.observability-kafka.svc.cluster.local:443}
%prod.mp.messaging.incoming.event-audit-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.event-audit-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.event-audit-in.value.deserializer=com.zaga.kafka.consumer.EventDeserialization
%prod.mp.messaging.incoming.event-audit-in.topic=${EVENT_TOPIC:events_data}
%prod.mp.messaging.incoming.event-audit-in.group.id=${EVENT_TOPIC_GROUP_ID:event}
%prod.mp.messaging.incoming.event-audit-in.value-deserialization-failure-handler=event-failure-fallback
%prod.mp.messaging.incoming.event-audit-in.failure-strategy=ignore
%prod.mp.messaging.incoming.event-audit-in.commit-strategy=throttled
%prod.mp.messaging.incoming.event-audit-in.auto.offset.reset=${EVENT_OFFSET_RESET:latest}


#EventsDTO configuration
%prod.mp.messaging.incoming.event-in.bootstrap.servers=${EVENT_BOOTSTRAP_URL:infra-kafka-bootstrap.observability-kafka.svc.cluster.local:443}
%prod.mp.messaging.incoming.event-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.event-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.event-in.value.deserializer=com.zaga.kafka.consumer.EventDeserialization
%prod.mp.messaging.incoming.event-in.topic=${EVENT_TOPIC:events_data}
%prod.mp.messaging.incoming.event-in.group.id=${EVENTDTO_TOPIC_GROUP_ID:eventdto}
%prod.mp.messaging.incoming.event-in.value-deserialization-failure-handler=event-failure-fallback
%prod.mp.messaging.incoming.event-in.failure-strategy=ignore
%prod.mp.messaging.incoming.event-in.commit-strategy=throttled
%prod.mp.messaging.incoming.event-in.auto.offset.reset=${EVENT_OFFSET_RESET:latest}


# Cluster_utilization configuration
%prod.mp.messaging.incoming.cluser_utilization-audit-in.bootstrap.servers=${CLUSTER_UTILIZATION_BOOTSTRAP_URL:infra-kafka-external-bootstrap-observability-kafka.apps.zagaopenshift.zagaopensource.com:443}
%prod.mp.messaging.incoming.cluser_utilization-audit-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.cluser_utilization-audit-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.cluser_utilization-audit-in.value.deserializer=com.zaga.kafka.consumer.ClusterUtilizationDeserialization
%prod.mp.messaging.incoming.cluser_utilization-audit-in.topic=${CLUSTER_UTILIZATION_TOPIC:kubelet_node_stats}
%prod.mp.messaging.incoming.cluser_utilization-audit-in.group.id=${CLUSTER_UTILIZATION_GROUP_ID:clustterUtil}
%prod.mp.messaging.incoming.cluser_utilization-audit-in.value-deserialization-failure-handler=cluster_utilization-failure-fallback
%prod.mp.messaging.incoming.cluser_utilization-audit-in.failure-strategy=ignore
%prod.mp.messaging.incoming.cluser_utilization-audit-in.commit-strategy=throttled
%prod.mp.messaging.incoming.cluser_utilization-audit-in.auto.offset.reset=${CLUSTER_UTILIZATION_OFFSET_RESET:latest}



# Cluster_utilizationDTO configuration
%prod.mp.messaging.incoming.cluser_utilization-in.bootstrap.servers=${CLUSTER_UTILIZATION_BOOTSTRAP_URL:infra-kafka-external-bootstrap-observability-kafka.apps.zagaopenshift.zagaopensource.com:443}
%prod.mp.messaging.incoming.cluser_utilization-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.cluser_utilization-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.cluser_utilization-in.value.deserializer=com.zaga.kafka.consumer.ClusterUtilizationDeserialization
%prod.mp.messaging.incoming.cluser_utilization-in.topic=${CLUSTER_UTILIZATION_TOPIC:kubelet_node_stats}
%prod.mp.messaging.incoming.cluser_utilization-in.group.id=${CLUSTER_UTILIZATIONDTO_GROUP_ID:clustterUtildto}
%prod.mp.messaging.incoming.cluser_utilization-in.value-deserialization-failure-handler=cluster_utilization-failure-fallback
%prod.mp.messaging.incoming.cluser_utilization-in.failure-strategy=ignore
%prod.mp.messaging.incoming.cluser_utilization-in.commit-strategy=throttled
%prod.mp.messaging.incoming.cluser_utilization-in.auto.offset.reset=${CLUSTER_UTILIZATION_OFFSET_RESET:latest}

# SSL Configuration for Consumer
# %prod.mp.messaging.incoming.alert-in.security.protocol=SSL
# %prod.mp.messaging.incoming.alert-in.ssl.truststore.location=./observai-kafka-cluster.jks
# %prod.mp.messaging.incoming.alert-in.ssl.truststore.password=password


# Quarkus CORS headers
%prod.quarkus.http.cors=true
%prod.quarkus.http.cors.origins=*
%prod.quarkus.http.cors.methods=GET,POST,PUT,DELETE
%prod.quarkus.http.cors.headers=Content-Type



cluster.url=https://api.zagaobservability.zagaopensource.com:6443
