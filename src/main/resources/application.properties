#############################################################################

### Dev Environment ###

# Dev Application configuration
%dev.quarkus.http.port=${APP_PORT:8080}
%dev.quarkus.http.host=${APP_HOST:0.0.0.0}


# MongoDB configuration
%dev.quarkus.mongodb.connection-string=${MONGODB_URL:mongodb+srv://devteam:Zagateam2023*@applicationcluster.tvbngn1.mongodb.net/test}

# Trace Configuration
%dev.mp.messaging.incoming.trace-in.bootstrap.servers=${TRACE_BOOTSTRAP_URL:observai-kafka-cluster-kafka-external-bootstrap-kafka-workspace.apps.zagaopenshift.zagaopensource.com:443}
%dev.mp.messaging.incoming.trace-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.trace-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.trace-in.value.deserializer=com.zaga.kafka.consumer.TraceDeserialization
%dev.mp.messaging.incoming.trace-in.topic=${TRACE_TOPIC:observai-main-traces-1}
%dev.mp.messaging.incoming.trace-in.auto.offset.reset=${TRACE_OFFSET_RESET:latest}

# SSL
%dev.mp.messaging.incoming.trace-in.security.protocol=SSL
%dev.mp.messaging.incoming.trace-in.ssl.truststore.location=./observai-kafka-cluster.jks
%dev.mp.messaging.incoming.trace-in.ssl.truststore.password=password

# Log configuration
%dev.mp.messaging.incoming.logs-in.bootstrap.servers=${LOG_BOOTSTRAP_URL:observai-kafka-cluster-kafka-external-bootstrap-kafka-workspace.apps.zagaopenshift.zagaopensource.com:443}
%dev.mp.messaging.incoming.logs-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.logs-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.logs-in.value.deserializer=com.zaga.kafka.consumer.LogDeserialization
%dev.mp.messaging.incoming.logs-in.topic=${LOG_TOPIC:observai-main-logs-1}
%dev.mp.messaging.incoming.logs-in.auto.offset.reset=${LOG_OFFSET_RESET:latest}

# SSL
%dev.mp.messaging.incoming.logs-in.security.protocol=SSL
%dev.mp.messaging.incoming.logs-in.ssl.truststore.location=./observai-kafka-cluster.jks
%dev.mp.messaging.incoming.logs-in.ssl.truststore.password=password


# Metric configuration
%dev.mp.messaging.incoming.metric-in.bootstrap.servers=${METRIC_BOOTSTRAP_URL:observai-kafka-cluster-kafka-external-bootstrap-kafka-workspace.apps.zagaopenshift.zagaopensource.com:443}
%dev.mp.messaging.incoming.metric-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.metric-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.metric-in.value.deserializer=com.zaga.kafka.consumer.MetricDeserialization
%dev.mp.messaging.incoming.metric-in.topic=${METRIC_TOPIC:observai-main-metrics-1}
%dev.mp.messaging.incoming.metric-in.value-deserialization-failure-handler=metric-failure-fallback
%dev.mp.messaging.incoming.metric-in.failure-strategy=ignore
%dev.mp.messaging.incoming.metric-in.commit-strategy=throttled
%dev.mp.messaging.incoming.metric-in.auto.offset.reset=${METRIC_OFFSET_RESET:latest}

# SSL
%dev.mp.messaging.incoming.metric-in.security.protocol=SSL
%dev.mp.messaging.incoming.metric-in.ssl.truststore.location=./observai-kafka-cluster.jks
%dev.mp.messaging.incoming.metric-in.ssl.truststore.password=password


# Quarkus CORS headers
%dev.quarkus.http.cors=true
%dev.quarkus.http.cors.origins=*
%dev.quarkus.http.cors.methods=GET,POST,PUT,DELETE
%dev.quarkus.http.cors.headers=Content-Type


#####################################################################

### Production ###

# Application configuration
%prod.quarkus.http.port=${APP_PORT:8080}
%prod.quarkus.http.host=${APP_HOST:0.0.0.0}

# MongoDB configuration
%prod.quarkus.mongodb.connection-string=${MONGODB_URL:mongodb://mongodb-ops-manager:Devdbpass2023@zaga-mongo-ops-manager-db-0.zaga-mongo-ops-manager-db-svc.mongodb-workspace.svc.cluster.local:27017,zaga-mongo-ops-manager-db-1.zaga-mongo-ops-manager-db-svc.mongodb-workspace.svc.cluster.local:27017,zaga-mongo-ops-manager-db-2.zaga-mongo-ops-manager-db-svc.mongodb-workspace.svc.cluster.local:27017/?authMechanism=SCRAM-SHA-256&authSource=admin&connectTimeoutMS=20000&replicaSet=zaga-mongo-ops-manager-db&serverSelectionTimeoutMS=20000}

# Trace Configuration
%prod.mp.messaging.incoming.trace-in.bootstrap.servers=${TRACE_BOOTSTRAP_URL:observai-kafka-ephemeral-kafka-bootstrap.kafka-workspace.svc.cluster.local:9092}
%prod.mp.messaging.incoming.trace-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.trace-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.trace-in.value.deserializer=com.zaga.kafka.consumer.TraceDeserialization
%prod.mp.messaging.incoming.trace-in.topic=${TRACE_TOPIC:observai-main-traces-2}
%prod.mp.messaging.incoming.trace-in.auto.offset.reset=${TRACE_OFFSET_RESET:latest}


# Log configuration
%prod.mp.messaging.incoming.logs-in.bootstrap.servers=${LOG_BOOTSTRAP_URL:observai-kafka-ephemeral-kafka-bootstrap.kafka-workspace.svc.cluster.local:9092}
%prod.mp.messaging.incoming.logs-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.logs-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.logs-in.value.deserializer=com.zaga.kafka.consumer.LogDeserialization
%prod.mp.messaging.incoming.logs-in.topic=${LOG_TOPIC:observai-main-logs-2}
%prod.mp.messaging.incoming.logs-in.auto.offset.reset=${LOG_OFFSET_RESET:latest}


# Metric configuration
%prod.mp.messaging.incoming.metric-in.bootstrap.servers=${METRIC_BOOTSTRAP_URL:observai-kafka-ephemeral-kafka-bootstrap.kafka-workspace.svc.cluster.local:9092}
%prod.mp.messaging.incoming.metric-in.connector=smallrye-kafka
%prod.mp.messaging.incoming.metric-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.metric-in.value.deserializer=com.zaga.kafka.consumer.MetricDeserialization
%prod.mp.messaging.incoming.metric-in.topic=${METRIC_TOPIC:observai-main-metrics-2}
%prod.mp.messaging.incoming.metric-in.value-deserialization-failure-handler=metric-failure-fallback
%prod.mp.messaging.incoming.metric-in.failure-strategy=ignore
%prod.mp.messaging.incoming.metric-in.commit-strategy=throttled
%prod.mp.messaging.incoming.metric-in.auto.offset.reset=${METRIC_OFFSET_RESET:latest}


# Quarkus CORS headers
%prod.quarkus.http.cors=true
%prod.quarkus.http.cors.origins=*
%prod.quarkus.http.cors.methods=GET,POST,PUT,DELETE
%prod.quarkus.http.cors.headers=Content-Type
